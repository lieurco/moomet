// ======================= 
// LET SUSY DO THE MATH
// =======================

@mixin container(){
	@each $breakpoint, $width in $containers{
		@include respond-to($breakpoint){
			max-width: $width;
			margin-left: auto;
			margin-right: auto;
		}
	}
}

@each $size, $setting in $susy-settings{
	@include susy-at($setting) {
		.row{				
			margin-left: -1 * gutter()/2;
			margin-right: -1 * gutter()/2;
			@if $grid-type == 'flexbox'{
				display: flex;
				flex-wrap: wrap;
			}
		}
		[class*="moo-"]{
			margin-right: gutter()/2;
			margin-left: gutter()/2;
			@if $grid-type == 'flexbox'{
				flex-basis: 100%;
			}
		}
	   	@for $i from 1 through map-get($setting, 'total-column') {
	   		@if $size == 'xs'{
	   			.moo-#{$i} {
			  		@if $grid-type == 'flexbox'{
						flex: 0 0 span($i);
						max-width: span($i);
						position: relative;
					} @else {
						width: span($i);
						position: relative;
					  	float: $grid-alignment;
					}
			  	}
			  	.push-#{$i}{
			  		#{$grid-alignment}: span($i);
			  	}
			  	.pull-#{$i}{
			  		#{$grid-alignment-rev}: span($i);
			  	}
			  	.offset-#{$i}{
			  		margin-#{$grid-alignment}: span($i);
			  	}
			} @else {
				.moo-#{$size}-#{$i} {
			  		@if $grid-type == 'flexbox'{
						flex: 0 0 span($i);
						max-width: span($i);
						position: relative;
					} @else {
						width: span($i);
						position: relative;
					  	float: $grid-alignment;
					}
			  	}
			  	.push-#{$size}-#{$i}{
			  		#{$grid-alignment}: span($i);
				}
				.pull-#{$size}-#{$i}{
				  	#{$grid-alignment-rev}: span($i);
				}
				.offset-#{$size}-#{$i}{
				  	margin-#{$grid-alignment}: span($i);
				}
			}
		}
	}
}

@if $grid-type == 'flexbox'{
	// JUSTIFY CONTENT
	// APPLY on .row
	.justify-content-start{
		justify-content: flex-start;
	}
	.justify-content-end{
		justify-content: flex-end;
	}
	.justify-content-center{
		justify-content: center;
	}
	.justify-content-between{
		justify-content: space-between;
	}
	.justify-content-around{
		justify-content: space-around;
	}

	// ALIGN ITEMS for VERTICAL ALIGN
	// APPLY on .row
	.align-items-start{
		align-items: flex-start;
	}
	.align-items-end{
		align-items: flex-end;
	}
	.align-items-center{
		align-items: center;
	}
	.align-items-baseline{
		align-items: baseline;
	}
	.align-items-strech{
		align-items: stretch;
	}

	// ALIGN SELF for VERTICAL ALIGN
	// APPLY on individual element
	.align-self-start{
		align-items: flex-start;
	}
	.align-self-end{
		align-items: flex-end;
	}
	.align-self-center{
		align-items: center;
	}
	.align-self-baseline{
		align-items: baseline;
	}
	.align-self-strech{
		align-items: stretch;
	}
}


.container{	
	@include container();
	.row{
		@extend %clearfix;
	}
}
