// ======================= 
// LET SUSY DO THE MATH
// =======================

@mixin container(){
	@each $breakpoint, $width in $containers{
		@include respond-to($breakpoint){
			max-width: $width;
			margin-left: auto;
			margin-right: auto;
		}
	}
}

// block mixin
// change settings for a block of content
// (maybe we should add this to the Susy core?)
// 	
@mixin susy-settings-block($config) {
  // store the old settings
  $global: $susy;
  // apply the new settings
  $susy: map-merge($susy, $config) !global;
  
  // allow nested styles, using new settings
  @content;
  
  // return to the initial settings
  $susy: $global !global;
}	

@function check-xs($width) {
  @return if($width = 576, $width, null);
}

// Mobile first grid, huh?
// I think so

@for $i from 1 through map-deep-get($susy-settings, 's', 'columns') {
  	.col-#{$i} {
  		@if $grid-type == 'flexbox'{
			flex: 0 0 span($i);
			max-width: span($i);
		} @else {
			width: span($i);
		}
  	}
  	.push-#{$i}{
  		#{$grid-alignment}: span($i);
  	}
  	.pull-#{$i}{
  		#{$grid-alignment-rev}: span($i);
  	}
  	.offset-#{$i}{
  		margin-#{$grid-alignment}: span($i);
  	}
}

@each $breakpoint, $width in $breakpoints{
	$min: check-xs($width);
	@if $min{
		@include respond-to($breakpoint){
			@each $size, $setting in $susy-settings{
				@include susy-settings-block($setting) {
					@for $i from 1 through map-get($susy, 'columns') {
						.col-#{$breakpoint}-#{$i} {
					  		@if $grid-type == 'flexbox'{
								flex: 0 0 span($i);
								max-width: span($i);
							} @else {
								width: span($i);
							}
					  	}
					  	.push-#{$breakpoint}-#{$i}{
					  		#{$grid-alignment}: span($i);
						}
						.pull-#{$breakpoint}-#{$i}{
						  	#{$grid-alignment-rev}: span($i);
						}
						.offset-#{$breakpoint}-#{$i}{
						  	margin-#{$grid-alignment}: span($i);
						}
					  }
				}
			}
		}
	} 
}

@if $grid-type == 'flexbox'{
	// JUSTIFY CONTENT
	// APPLY on .row
	.justify-content-start{
		justify-content: flex-start;
	}
	.justify-content-end{
		justify-content: flex-end;
	}
	.justify-content-center{
		justify-content: center;
	}
	.justify-content-between{
		justify-content: space-between;
	}
	.justify-content-around{
		justify-content: space-around;
	}

	// ALIGN ITEMS for VERTICAL ALIGN
	// APPLY on .row
	.align-items-start{
		align-items: flex-start;
	}
	.align-items-end{
		align-items: flex-end;
	}
	.align-items-center{
		align-items: center;
	}
	.align-items-baseline{
		align-items: baseline;
	}
	.align-items-strech{
		align-items: stretch;
	}

	// ALIGN SELF for VERTICAL ALIGN
	// APPLY on individual element
	.align-self-start{
		align-items: flex-start;
	}
	.align-self-end{
		align-items: flex-end;
	}
	.align-self-center{
		align-items: center;
	}
	.align-self-baseline{
		align-items: baseline;
	}
	.align-self-strech{
		align-items: stretch;
	}
}


.container{	
	@include container();
	.row{
		@extend %clearfix;
		margin-left: -1 * gutter()/2;
		margin-right: -1 * gutter()/2;
		//@warn $grid-type;
		@if $grid-type == 'flexbox'{
			display: flex;
			flex-wrap: wrap;
		}
	}
}

[class*="col-"]{
	position: relative;
	padding-right: gutter()/2;
  	padding-left: gutter()/2;
  	float: $grid-alignment;
}
